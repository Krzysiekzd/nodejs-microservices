services:
  # ===== API GATEWAY =====
  api-gateway:
    build: ./api-gateway
    env_file: [ ./.env ]
    environment:
      - USER_SERVICE_URL=${USER_SERVICE_URL}
      - PRODUCT_SERVICE_URL=${PRODUCT_SERVICE_URL}
      - ORDER_SERVICE_URL=${ORDER_SERVICE_URL}
      - INVENTORY_SERVICE_URL=${INVENTORY_SERVICE_URL}
      - NOTIFICATION_SERVICE_URL=${NOTIFICATION_SERVICE_URL}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN}
      - NODE_ENV=${NODE_ENV}
      - PORT=${SERVICE_PORT}
    ports: [ "${API_GATEWAY_HOST_PORT}:${SERVICE_PORT}" ]
    depends_on:
      rabbitmq:
        condition: service_healthy
      user-service:
        condition: service_started
      product-service:
        condition: service_started
      order-service:
        condition: service_started
      inventory-service:
        condition: service_started
      notification-service:
        condition: service_started
    restart: unless-stopped
    networks: [app]

  # ===== USER SERVICE (Nest) =====
  user-service:
    build: ./user-service
    env_file: [ ./.env ]
    environment:
      - PORT=${SERVICE_PORT}
      - DATABASE_URL=${USER_DATABASE_URL}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB_USERS}
      - RABBITMQ_URL=${RABBITMQ_URL}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN}
      - NODE_ENV=${NODE_ENV}
    ports: [ "${USER_SERVICE_HOST_PORT}:${SERVICE_PORT}" ]
    depends_on:
      postgres:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped
    networks: [app]

  # ===== PRODUCT SERVICE (Express) =====
  product-service:
    build: ./product-service
    env_file: [ ./.env ]
    environment:
      - PORT=${SERVICE_PORT}
      - MONGO_URI=${PRODUCT_MONGO_URL}        # cover both names
      - MONGODB_URL=${PRODUCT_MONGO_URL}
      - RABBITMQ_URL=${RABBITMQ_URL}
      - NODE_ENV=${NODE_ENV}
    ports: [ "${PRODUCT_SERVICE_HOST_PORT}:${SERVICE_PORT}" ]
    depends_on:
      mongodb:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped
    networks: [app]

  # ===== ORDER SERVICE (Nest) =====
  order-service:
    build: ./order-service
    env_file: [ ./.env ]
    environment:
      - PORT=${SERVICE_PORT}
      - DATABASE_URL=${ORDERS_DATABASE_URL}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB_ORDERS}
      - RABBITMQ_URL=${RABBITMQ_URL}
      - NODE_ENV=${NODE_ENV}
    ports: [ "${ORDER_SERVICE_HOST_PORT}:${SERVICE_PORT}" ]
    depends_on:
      postgres:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped
    networks: [app]

  # ===== INVENTORY SERVICE (Express) =====
  inventory-service:
    build: ./inventory-service
    env_file: [ ./.env ]
    environment:
      - PORT=${SERVICE_PORT}
      - MONGO_URI=${INVENTORY_MONGO_URL}      # << required by code
      - MONGODB_URL=${INVENTORY_MONGO_URL}    # optional alias
      - RABBITMQ_URL=${RABBITMQ_URL}
      - NODE_ENV=${NODE_ENV}
    ports: [ "${INVENTORY_SERVICE_HOST_PORT}:${SERVICE_PORT}" ]
    depends_on:
      mongodb:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped
    networks: [app]

  # ===== NOTIFICATION SERVICE (Express) =====
  notification-service:
    build: ./notification-service
    env_file: [ ./.env ]
    environment:
      - PORT=${SERVICE_PORT}
      - MONGO_URI=${NOTIFICATION_MONGO_URL}
      - MONGODB_URL=${NOTIFICATION_MONGO_URL}
      - RABBITMQ_URL=${RABBITMQ_URL}
      - NODE_ENV=${NODE_ENV}
    ports: [ "${NOTIFICATION_SERVICE_HOST_PORT}:${SERVICE_PORT}" ]
    depends_on:
      mongodb:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped
    networks: [app]

  # ===== EVENT LISTENERS  =====
  order-event-listener:
    build: ./order-event-listener
    env_file: [ ./.env ]
    environment:
      - RABBITMQ_URL=${RABBITMQ_URL}
      - NODE_ENV=${NODE_ENV}
    depends_on:
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped
    networks: [app]

  product-event-listener:
    build: ./product-event-listener
    env_file: [ ./.env ]
    environment:
      - RABBITMQ_URL=${RABBITMQ_URL}
      - NODE_ENV=${NODE_ENV}
    depends_on:
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped
    networks: [app]

  # ===== INFRA =====
  postgres:
    image: postgres:15
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports: [ "9091:5432" ]
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/00-init.sql:ro
    restart: unless-stopped
    networks: [app]

  mongodb:
    image: mongo:6
    ports: [ "9092:27017" ]
    volumes:
      - mongo_data:/data/db
    restart: unless-stopped
    networks: [app]


  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "9093:5672"
      - "9094:15672"
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 10s
      timeout: 5s
      retries: 12
    networks: [app]


networks:
  app: {}

volumes:
  postgres_data: {}
  mongo_data: {}
